//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Jack.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class JackParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, ID=17, 
		WS=18;
	public const int
		RULE_class_ = 0, RULE_propertyDeclaration = 1, RULE_multiPropertyDeclaration = 2, 
		RULE_subRoutineDeclaration = 3, RULE_returnType = 4, RULE_subRoutineBody = 5, 
		RULE_className = 6, RULE_varName = 7, RULE_subRoutineName = 8, RULE_propertyKind = 9, 
		RULE_subRoutineKind = 10, RULE_type = 11;
	public static readonly string[] ruleNames = {
		"class_", "propertyDeclaration", "multiPropertyDeclaration", "subRoutineDeclaration", 
		"returnType", "subRoutineBody", "className", "varName", "subRoutineName", 
		"propertyKind", "subRoutineKind", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'class'", "'{'", "'}'", "';'", "','", "'('", "')'", "'void'", "'static'", 
		"'field'", "'constructor'", "'function'", "'method'", "'int'", "'char'", 
		"'boolean'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Jack.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static JackParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JackParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JackParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Class_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(JackParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext[] propertyDeclaration() {
			return GetRuleContexts<PropertyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyDeclarationContext propertyDeclaration(int i) {
			return GetRuleContext<PropertyDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubRoutineDeclarationContext[] subRoutineDeclaration() {
			return GetRuleContexts<SubRoutineDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubRoutineDeclarationContext subRoutineDeclaration(int i) {
			return GetRuleContext<SubRoutineDeclarationContext>(i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(Context, State);
		EnterRule(_localctx, 0, RULE_class_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(T__0);
			State = 25;
			className();
			State = 26;
			Match(T__1);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8 || _la==T__9) {
				{
				{
				State = 27;
				propertyDeclaration();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) {
				{
				{
				State = 33;
				subRoutineDeclaration();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 39;
			Match(T__2);
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyKindContext propertyKind() {
			return GetRuleContext<PropertyKindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiPropertyDeclarationContext[] multiPropertyDeclaration() {
			return GetRuleContexts<MultiPropertyDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiPropertyDeclarationContext multiPropertyDeclaration(int i) {
			return GetRuleContext<MultiPropertyDeclarationContext>(i);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext propertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			propertyKind();
			State = 43;
			type();
			State = 44;
			varName();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 45;
				multiPropertyDeclaration();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiPropertyDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarNameContext varName() {
			return GetRuleContext<VarNameContext>(0);
		}
		public MultiPropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiPropertyDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterMultiPropertyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitMultiPropertyDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiPropertyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiPropertyDeclarationContext multiPropertyDeclaration() {
		MultiPropertyDeclarationContext _localctx = new MultiPropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_multiPropertyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 53;
			Match(T__4);
			State = 54;
			varName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubRoutineDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubRoutineKindContext subRoutineKind() {
			return GetRuleContext<SubRoutineKindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubRoutineNameContext subRoutineName() {
			return GetRuleContext<SubRoutineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubRoutineBodyContext subRoutineBody() {
			return GetRuleContext<SubRoutineBodyContext>(0);
		}
		public SubRoutineDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subRoutineDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterSubRoutineDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitSubRoutineDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubRoutineDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubRoutineDeclarationContext subRoutineDeclaration() {
		SubRoutineDeclarationContext _localctx = new SubRoutineDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_subRoutineDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			subRoutineKind();
			State = 57;
			returnType();
			State = 58;
			subRoutineName();
			State = 59;
			Match(T__5);
			State = 60;
			Match(T__6);
			State = 61;
			subRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext returnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_returnType);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				Match(T__7);
				}
				break;
			case T__13:
			case T__14:
			case T__15:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubRoutineBodyContext : ParserRuleContext {
		public SubRoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subRoutineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterSubRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitSubRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubRoutineBodyContext subRoutineBody() {
		SubRoutineBodyContext _localctx = new SubRoutineBodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_subRoutineBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__1);
			State = 68;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JackParser.ID, 0); }
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JackParser.ID, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitVarName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarNameContext varName() {
		VarNameContext _localctx = new VarNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_varName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubRoutineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JackParser.ID, 0); }
		public SubRoutineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subRoutineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterSubRoutineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitSubRoutineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubRoutineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubRoutineNameContext subRoutineName() {
		SubRoutineNameContext _localctx = new SubRoutineNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_subRoutineName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyKindContext : ParserRuleContext {
		public PropertyKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyKind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterPropertyKind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitPropertyKind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyKindContext propertyKind() {
		PropertyKindContext _localctx = new PropertyKindContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubRoutineKindContext : ParserRuleContext {
		public SubRoutineKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subRoutineKind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterSubRoutineKind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitSubRoutineKind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubRoutineKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubRoutineKindContext subRoutineKind() {
		SubRoutineKindContext _localctx = new SubRoutineKindContext(Context, State);
		EnterRule(_localctx, 20, RULE_subRoutineKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(JackParser.ID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IJackListener typedListener = listener as IJackListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJackVisitor<TResult> typedVisitor = visitor as IJackVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 245760L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,83,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,5,0,29,8,0,10,
		0,12,0,32,9,0,1,0,5,0,35,8,0,10,0,12,0,38,9,0,1,0,1,0,1,0,1,1,1,1,1,1,
		1,1,5,1,47,8,1,10,1,12,1,50,9,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,4,1,4,3,4,66,8,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,1,10,1,11,1,11,1,11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,3,1,
		0,9,10,1,0,11,13,1,0,14,17,74,0,24,1,0,0,0,2,42,1,0,0,0,4,53,1,0,0,0,6,
		56,1,0,0,0,8,65,1,0,0,0,10,67,1,0,0,0,12,70,1,0,0,0,14,72,1,0,0,0,16,74,
		1,0,0,0,18,76,1,0,0,0,20,78,1,0,0,0,22,80,1,0,0,0,24,25,5,1,0,0,25,26,
		3,12,6,0,26,30,5,2,0,0,27,29,3,2,1,0,28,27,1,0,0,0,29,32,1,0,0,0,30,28,
		1,0,0,0,30,31,1,0,0,0,31,36,1,0,0,0,32,30,1,0,0,0,33,35,3,6,3,0,34,33,
		1,0,0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,39,1,0,0,0,38,36,
		1,0,0,0,39,40,5,3,0,0,40,41,5,0,0,1,41,1,1,0,0,0,42,43,3,18,9,0,43,44,
		3,22,11,0,44,48,3,14,7,0,45,47,3,4,2,0,46,45,1,0,0,0,47,50,1,0,0,0,48,
		46,1,0,0,0,48,49,1,0,0,0,49,51,1,0,0,0,50,48,1,0,0,0,51,52,5,4,0,0,52,
		3,1,0,0,0,53,54,5,5,0,0,54,55,3,14,7,0,55,5,1,0,0,0,56,57,3,20,10,0,57,
		58,3,8,4,0,58,59,3,16,8,0,59,60,5,6,0,0,60,61,5,7,0,0,61,62,3,10,5,0,62,
		7,1,0,0,0,63,66,5,8,0,0,64,66,3,22,11,0,65,63,1,0,0,0,65,64,1,0,0,0,66,
		9,1,0,0,0,67,68,5,2,0,0,68,69,5,3,0,0,69,11,1,0,0,0,70,71,5,17,0,0,71,
		13,1,0,0,0,72,73,5,17,0,0,73,15,1,0,0,0,74,75,5,17,0,0,75,17,1,0,0,0,76,
		77,7,0,0,0,77,19,1,0,0,0,78,79,7,1,0,0,79,21,1,0,0,0,80,81,7,2,0,0,81,
		23,1,0,0,0,4,30,36,48,65
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
